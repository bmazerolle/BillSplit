{"version":3,"file":"home.js","sourceRoot":"","sources":["../../src/scripts/home.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Summary: Makes the points for the group by adding all of the bills the user is a payee in and subtracting all\n * that they are a payer for.\n * @param purchases\n */\nfunction makePoints(purchases: any) {\n    const date = new Date();\n    const points: any = new Array();\n    for (const purch of purchases.payee) {\n        let dayWFreq = 0;\n        const purchDate = new Date(purch.date).getDate();\n        // Account Frequencies are used for foresting spending, the date object is used to get the last day\n        // in the month\n        while (dayWFreq + purchDate < new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()) {\n            points.push({x: dayWFreq + purchDate , y: purch.item.Price});\n            dayWFreq += purch.frequency;\n            if (purch.frequency === 1) {\n                break;\n            }\n        }\n    }\n    if (purchases.payer) {\n        for (const purch of purchases.payer) {\n            let dayWFreq = 0;\n            const purchDate = new Date(purch.date).getDate();\n            // Account Frequencies are used for foresting spending, the date object is used to get the last day\n            // in the month\n            while (dayWFreq + purchDate < new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()) {\n                points.push({x: dayWFreq + purchDate, y: -purch.item.Price / purch.Group.Members.length});\n                dayWFreq += purch.frequency;\n                if (purch.frequency === 1) {\n                    break;\n                }\n            }\n        }\n    }\n    return points;\n\n}\n\n/**\n * Summary: gets the net amount a user owes to each group\n * @param purchases\n */\nfunction listGroupNet(purchases: any) {\n    const netVals: any = {};\n    for (const purch of purchases.payee) {\n        if (isNaN(netVals[purch.Group.Name])) {\n            netVals[purch.Group.Name] = -purch.item.Price;\n        } else {\n            netVals[purch.Group.Name] -= purch.item.Price;\n        }\n    }\n    for (const purch of purchases.payer) {\n        if (isNaN(netVals[purch.Group.Name])) {\n            netVals[purch.Group.Name] = purch.item.Price;\n        } else {\n            netVals[purch.Group.Name] += purch.item.Price / purch.Group.Members.length;\n        }\n    }\n    return netVals;\n}\n\n/**\n * Summary: takes the net amount a user owes and displays in on the screen\n * @param nets\n */\nasync function displayNets(nets: any) {\n    // tslint:disable-next-line:forin\n    for (const group in nets) {\n        const amount = Math.round(100 * nets[group]) / 100;\n        const item = document.createElement(\"a\");\n        const date = new Date();\n        $(item).attr(\"class\", \"list-group-item list-group-item-action\");\n        $(item).html(\"<div class='row' style='height:55px;'>\" +\n                                        \"<div class='col'>\" +\n                                            \"<h4>\" + group + \"</h4>\" +\n                                        \"</div>\" +\n                                        \"<div class='col' style='text-align:right'>\" +\n                                            \"<div>\" +\n                                                \"<p>\" +\n                                                    new Date(date.getFullYear(), date.getMonth() + 1, 0)\n                                                        .toDateString() + \"</p>\" +\n                                            \"</div>\" +\n                                            \"<div>\" +\n                                                \"<p>$\" + amount.toFixed(2) + \"</p>\" +\n                                            \"</div>\" +\n                                        \"</div>\" +\n                                    \"</div>\");\n        $(\"#billStatus\").append(item);\n    }\n}\n\n/**\n * Summary: Gets all of a user's purchase and send it into the appropriate functions\n */\nfunction getUserPurchases() {\n    $.ajax({\n        data: $(\"#userId\").serialize(),\n        success: (result) => {\n            console.log(result);\n            const points = makePoints(result);\n            graphPurchases(points, \"#purchaseGraph\")\n                .catch((err) => {\n                    $(\"#error\").html(\"Could not create graph\");\n                });\n            listGroupPurchases(result.payee, 10)\n                .catch((err) => {\n                    $(\"#error\").html(\"Could not create list group purchases\");\n                });\n            const nets = listGroupNet(result);\n            displayNets(nets)\n                .catch((err) => {\n                    $(\"#error\").html(\"Could not display the group bill totals\");\n                });\n        },\n        type: \"GET\",\n        url: \"/user/bills/purchases\",\n    });\n}\n\nif (document.URL.includes(\"home\")) {\n    document.addEventListener(\"DOMContentLoaded\", () => {\n        getUserPurchases();\n    });\n}\n"]}