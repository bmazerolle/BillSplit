{"version":3,"file":"dbClient.test.js","sourceRoot":"","sources":["../../src/tests/dbClient.test.ts"],"names":[],"mappings":";;AAAA,yCAA4C;AAC5C,IAAM,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC;AAC7C,mCAAiC;AACjC,4CAAyC;AAEzC,oDAAiD;AACjD,+DAA4D;AAE5D,+DAA4D;AAC5D,sCAAyC;AACzC,IAAO,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;AAEzB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,IAAI,CAAC,SAAS,EAAE;IACR,0BAA0B;IAC1B,IAAM,IAAI,GAAG,IAAI,kBAAQ,CAAC,0BAA0B,CAAC,CAAC;IACtD,IAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACxB,IAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,EAAG,OAAO,CAAC,CAAC;IACjF,0BAA0B;IAC1B,IAAM,IAAI,GAAG,IAAI,+BAAc,EAAE,CAAC;IAClC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACzB,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IAC7B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;IAChC,mBAAmB;IACnB,IAAM,IAAI,GAAG,IAAI,WAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,IAAM,EAAE,GAAG,IAAI,+BAAc,CAAC,IAAI,CAAC,CAAC;IACpC,IAAM,GAAG,GAAG,IAAI,kBAAQ,CAAC,CAAC,CAAC,CAAC;IAC5B,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACpC,IAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACrC,0BAA0B;IAC1B,QAAQ,CAAC,OAAO,EAAE,CAAC;IACnB,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAC9B,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACjC,yCAAyC;IACzC,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAC9B,QAAQ,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACtC,QAAQ,CAAC,SAAS,EAAE,CAAC;IACrB,6BAA6B;IAC7B,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,kBAAQ,EAAE,CAAC,KAAK,IAAI,CAAC,CAAC;IACnD,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;IACvB,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC;IAC1C,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC;IAC1C,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC;IAC7C,MAAM,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC","sourcesContent":["import appModule = require(\"../../src/app\");\nconst app = appModule.Server.bootstrap().app;\nimport {ObjectId} from \"mongodb\";\nimport {Bill} from \"../baseClasses/Bill\";\nimport {Item} from \"../baseClasses/Item\";\nimport {Purchase} from \"../baseClasses/Purchase\";\nimport {BillController} from \"../controller/BillController\";\nimport {ItemController} from \"../controller/ItemController\";\nimport {UserController} from \"../controller/UserController\";\nimport DbClient = require(\"../DbClient\");\nimport any = jasmine.any;\n\njest.setTimeout(20000);\n\ntest(\"Test db\", () => {\n        // setting up a basic item\n        const item = new ObjectId(\"5ddaff0802aed89a3455e616\");\n        const date = new Date();\n        const purchase = new Purchase(date, item, 5, \"Purchase Name\", 5.99, 5 , \"group\");\n        // setting up a basic user\n        const user = new UserController();\n        user.addName(\"User\");\n        user.addPassword(\"Pass\");\n        user.addUserName(\"UserName\");\n        user.addEmail(\"user@email.com\");\n        // create variables\n        const bill = new Bill(user);\n        const BC = new BillController(user);\n        const obj = new ObjectId(5);\n        const bills = DbClient.getBill(obj);\n        const all = DbClient.getAll(\"Bills\");\n        // test database functions\n        DbClient.connect();\n        DbClient.insert(\"Bills\", any);\n        DbClient.push(\"Bills\", obj, any);\n        // DbClient.updateOne(\"Bills\", obj, any);\n        DbClient.upsert(\"Bills\", any);\n        DbClient.updateOne(\"Bills\", obj, any);\n        DbClient.aggGroups();\n        // do tests to expect from DB\n        expect(DbClient.getGroup(new ObjectId()) === null);\n        expect(bills === null);\n        expect(DbClient.getAll(\"Bills\") !== null);\n        expect(DbClient.getUser(\"User\") !== null);\n        expect(DbClient.getUserObject(obj) !== null);\n        expect(all !== null);\n    });\n\n"]}