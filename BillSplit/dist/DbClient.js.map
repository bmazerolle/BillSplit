{"version":3,"file":"DbClient.js","sourceRoot":"","sources":["../src/DbClient.ts"],"names":[],"mappings":"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","sourcesContent":["import {Db, MongoClient, MongoError, ObjectId} from \"mongodb\";\nimport \"./enviro\";\n\nclass DbClient {\n    public db!: Db;\n\n    /*\n    * Summary: get the environment variable for the database and connects to it\n    * Parameters: none\n    * Returns: database connection\n     */\n    public async connect() {\n        try {\n            const dbname: any = process.env.MONGODB_URI!;\n            const client = await MongoClient.connect(dbname, {useUnifiedTopology: true});\n            this.db = client.db(\"billsplit\");\n            return this.db;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Gets all of the documents in a specified collection\n    * Parameters: collection name\n    * Returns: array of documents\n     */\n    public async getAll(collection: string) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(collection).find().toArray();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Updates the database with a new document, but will add a new document if it doesnt exist\n    * Parameters: Collection name, document to be upserted\n    * Returns: Confirmation object\n    * Catch: Mongodb Error\n     */\n    public async upsert(collection: string, doc: any) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(collection).findOneAndUpdate(doc,\n                { $setOnInsert: doc },\n                { returnOriginal: true, upsert: true } );\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Updates a specific document in a collection given with the document given\n    * Parameters: Collection name, id of item to be updated and document to update it with\n    * Returns: Confirmation of insertion\n    * Throw: Mongodb Error\n     */\n    public async updateOne(collection: string, id: ObjectId, doc: any) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(collection).updateOne({_id: id}, doc);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Updates a given document by inserting an object into a list\n    * Parameters: Collection name, object id and object with name of attribute and value of object to be pushed\n    * Returns: confirmation of insertion\n    * Throw: Mongodb error\n     */\n    public async push(collection: string, id: ObjectId, doc: any) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(collection).updateOne({_id: id}, {$push: doc});\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Updates a given document by pulling an object out of a list\n    * Parameters: Collection name, object id, field to be pulled from and the id of the object to be pulled out of the\n    * list\n    * Returns: confirmation of insertion\n    * Throw: Mongodb error\n     */\n    public async pull(collection: string, id: ObjectId, field: string, pullId: ObjectId) {\n        try {\n            const conn = await this.connect();\n            const update: any = {\n                $pull: {},\n            };\n            update.$pull[field] = pullId;\n            return conn.collection(collection).updateOne({_id: id}, update);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Gets user aggregated will all of their attributes\n    * Parameters: Object id of the user\n    * Returns: Object of the user\n    * Throw: Mongodb error\n     */\n    public async getUser(userName: string) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(\"users\").aggregate([{$lookup: {\n                as: \"GroupOs\",\n                from: \"groups\",\n                pipeline: [ { $lookup: {\n                    as: \"MemberOs\",\n                    foreignField: \"_id\",\n                    from: \"users\",\n                    localField: \"Members\" } },\n                { $match: { MemberOs: { $elemMatch: {UserName: userName } } } } ] } },\n                { $lookup: {\n                    as: \"BillOs\",\n                    foreignField: \"_id\",\n                    from: \"bills\",\n                    localField: \"Bills\" } },\n                { $match: { UserName: userName } },\n            ]).toArray();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Inserts a given document into a given database\n    * Parameters: Collection name and document to be inserted\n    * Returns: Confirmation object\n    * Throw: Mongodb error\n     */\n    public async insert(collection: string, doc: any) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(collection).insertOne(doc);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Aggregates groups with user info\n    * Parameters: None\n    * Returns: Groups array\n    * Throw: Mongodb error\n     */\n    public async aggGroups() {\n        try {\n            const conn = await this.connect();\n            return conn.collection(\"groups\").aggregate([\n                { $lookup: {\n                            as: \"UserOs\",\n                            foreignField: \"_id\",\n                            from: \"users\",\n                            localField: \"Members\" } } ] ).toArray();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Gets a specific group\n    * Parameters: group id\n    * Returns: Groups object in a array of 1\n    * Throw: Mongodb error\n     */\n    public async getGroup(id: ObjectId) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(\"groups\").aggregate([\n                { $lookup: {\n                            as: \"UserOs\",\n                            foreignField: \"_id\",\n                            from: \"users\",\n                            localField: \"Members\" } },\n                { $match: { _id: id} },\n            ]).toArray();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Gets a specific bill\n    * Parameters: Bill id\n    * Returns: Bill object as a array of one\n    * Throw: Mongodb error\n     */\n    public async getBill(id: ObjectId) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(\"bills\").aggregate([\n                { $match: { _id: id} },\n            ]).toArray();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Gets a specific item\n    * Parameters: item id\n    * Returns: item object as a array of one\n    * Throw: Mongodb error\n     */\n    public async getItem(id: ObjectId) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(\"items\").aggregate([\n                { $match: {_id: id} },\n            ]).toArray();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Gets a specific user\n    * Parameters: user id\n    * Returns: user object as a array of one\n    * Throw: Mongodb error\n     */\n    public async getUserObject(id: ObjectId) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(\"users\").aggregate([\n                { $match: { _id: new ObjectId(id)} },\n            ]).toArray();\n        } catch (error) {\n            throw  error;\n        }\n    }\n\n    /*\n    * Summary: Counts the amount of documents that match the doc as a filter\n    * Parameters: collection name and document used as a filter\n    * Returns: count\n    * Throw: Mongodb error\n     */\n    public async count(collection: string, doc: any) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(collection).countDocuments(doc);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: Aggregates the infomation of a notification\n    * Parameters: collection name and match filter\n    * Returns: list of notifications\n    * Throw: Mongodb error\n     */\n    public async getNotifications(doc: any) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(\"notification\").aggregate([\n                { $lookup: {\n                            as: \"ToOb\",\n                            foreignField: \"_id\",\n                            from: \"users\",\n                            localField: \"To\" } },\n                { $lookup: {\n                            as: \"FromOb\",\n                            foreignField: \"_id\",\n                            from: \"users\",\n                            localField: \"From\" } },\n                { $lookup: {\n                            as: \"GroupOb\",\n                            foreignField: \"_id\",\n                            from: \"groups\",\n                            localField: \"Group\" } },\n                { $lookup: {\n                            as: \"ItemOb\",\n                            foreignField: \"_id\",\n                            from: \"items\",\n                            localField: \"Purchase.item\" } },\n                { $lookup: {\n                            as: \"declineItem\",\n                            foreignField: \"_id\",\n                            from: \"items\",\n                            localField: \"Item\"} },\n                { $match: doc },\n            ]).toArray();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /*\n    * Summary: updates all document of a collection match the doc as a filter\n    * Parameters: collection name, the update filter and the update values\n    * Returns: Confirmation object\n    * Throw: Mongodb error\n     */\n    public async updateSingle(collection: string, id: any, update: any) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(collection).updateOne(id, {$set: update});\n        } catch (error) {\n            throw error;\n        }\n    }\n    /*\n    * Summary: updates all document of a collection match the doc as a filter\n    * Parameters: collection name, the update filter and the update values\n    * Returns: Confirmation object\n    * Throw: Mongodb error\n     */\n\n    public async updateMultiple(collection: string, doc: any, update: any) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(collection).updateMany(doc, {$set: update});\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Summary: Uses regex for a filter in the search\n     * @param collection\n     * @param partial\n     */\n    public async partialMatch(collection: string, partial: string) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(collection).find({Name: {$regex: partial}}).toArray();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Summary: Queries from a collection with a filter\n     * @param collection\n     * @param doc\n     */\n    public async getWhere(collection: string, doc: any) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(collection).find(doc).toArray();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Summary: Gets the bills purchases of a specified group\n     * @param doc\n     */\n    public async getBills(doc: any) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(\"bills\").aggregate([\n                { $unwind: \"$Purchases\" },\n                { $lookup: {\n                            as: \"PayeeOs\",\n                            foreignField: \"_id\",\n                            from: \"users\",\n                            localField: \"Payee\" } },\n                { $lookup: {\n                            as: \"itemOs\",\n                            foreignField: \"_id\",\n                            from: \"items\",\n                            localField: \"Purchases.item\" } },\n                { $lookup: {\n                        as: \"groupOs\",\n                        foreignField: \"_id\",\n                        from: \"groups\",\n                        localField: \"Group\" } },\n                { $match: doc },\n            ]).toArray();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    public async remove(collection: string, id: ObjectId) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(collection).deleteOne({_id: id});\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    public async pullPurchaseByGroupUser(doc: any, pullInfo: any) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(\"bills\").updateOne(doc, {$pull: {Purchases: pullInfo}});\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    public async addPayer(search: any, pushId: ObjectId) {\n        try {\n            const conn = await this.connect();\n            return conn.collection(\"bills\").updateOne(search, {$push: {Payer: pushId}});\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nexport = new DbClient();\n"]}