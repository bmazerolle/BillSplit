{"version":3,"file":"ItemController.js","sourceRoot":"","sources":["../../src/controller/ItemController.ts"],"names":[],"mappings":"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","sourcesContent":["import {NextFunction, Request, Response, Router} from \"express\";\nimport {MongoError, ObjectId} from \"mongodb\";\nimport { Bill } from \"../baseClasses/Bill\";\nimport { Item } from \"../baseClasses/Item\";\nimport {BaseRoute} from \"../baseClasses/route\";\nimport DbClient = require(\"../DbClient\");\n\nexport class ItemController extends Item {\n    public static create(router: Router) {\n        // Get a list of all items\n        router.get(\"/items\", (req: Request, res: Response, next: NextFunction) => {\n            new ItemController().getAll(req, res);\n        });\n        // Get a single item\n        router.get(\"/item\", (req: Request, res: Response, next: NextFunction) => {\n            new ItemController().getItem(res, req);\n        });\n        // Form with item-name, item-price\n        router.post(\"/items/add\", (req: Request, res: Response, next: NextFunction) => {\n            new ItemController().addItem(res, req);\n        });\n        // Form with item-id (ex. ObjectId(\"xxxxxxxxxxxxxxxxxxxxxxxx\")), item-name, item-price\n        router.post(\"/items/edit\", (req: Request, res: Response, next: NextFunction) => {\n            new ItemController().editItem(res, req);\n        });\n        // Partial match query endpoint\n        router.get(\"/items/query\", (req: Request, res: Response, next: NextFunction) => {\n            new ItemController().query(res, req);\n        });\n    }\n\n    /*\n    * Summary: Attached to the /items route and returns all items in the database\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public getAll(req: Request, res: Response) {\n        DbClient.getAll(\"items\")\n            .then((list) => {\n                res.json(list);\n            })\n            .catch((err) => {\n                res.json( { status: \"could not connect to the database\"});\n            });\n    }\n\n    /*\n    * Summary: Gets a specified item from the database\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public getItem(res: Response, req: Request) {\n        const purchase = req.query.Purchases[0];\n        const itemId = new ObjectId(purchase.item);\n        DbClient.getItem(itemId)\n            .then((results) => {\n                const calculatedPrice = results[0].Price * purchase.quantity;\n                const purchaseItem = {\n                    group: purchase.title,\n                    name: results[0].Name,\n                    price: calculatedPrice,\n                };\n                res.json(purchaseItem);\n            })\n            .catch((err) => {\n                res.json({status: \"Unable to add purchase to bill\"});\n            });\n    }\n\n    /*\n    * Summary: Attached the /items/add route and it adds a item to the database\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public addItem(res: Response, req: Request) {\n        if (req.body[\"item-name\"] === undefined || req.body[\"item-price\"] === undefined) {\n            this.render(req, res, \"purchase\", {\n                status: \"Not all fields filled out\",\n                user: req.query.user,\n            });\n            return;\n        }\n\n        DbClient.upsert(\"items\", {\n            Name: req.body[\"item-name\"],\n            Price: +req.body[\"item-price\"],\n        })\n            .then(() => {\n                res.json({status: \"Item added\"});\n            })\n            .catch(() => {\n                res.json({status: \"Unable to connect to database\"});\n            });\n    }\n\n    /*\n    * Summary: Attached to the /item/edit and it edits a requested item with requested information\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public editItem(res: Response, req: Request) {\n        const id = new ObjectId(req.body[\"item-id\"].substring(10, 34));\n        DbClient.updateOne(\"items\", id, {\n                Name: req.body[\"item-name\"], Price: req.body[\"item-price\"],\n            })\n            .then(() => {\n                res.redirect(\"/purchases/view?user=\" + req.query.user);\n            })\n            .catch(() => {\n                this.render(req, res, \"purchase\", {\n                    User: req.query.user,\n                    err: \"Could not connect to the database\",\n                });\n            });\n    }\n\n    /**\n     * Summary: Queries for an item using partial matches\n     * @param res\n     * @param req\n     */\n    public query(res: Response, req: Request) {\n        if (req.query.q === undefined) {\n            res.json([]);\n            return;\n        }\n        DbClient.partialMatch(\"items\", req.query.q)\n            .then((results) => {\n                res.json(results);\n            })\n            .catch((err: MongoError) => {\n                res.json({\n                    error: err,\n                    result: \"\",\n                });\n            });\n    }\n}\n"]}