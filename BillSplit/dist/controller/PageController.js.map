{"version":3,"file":"PageController.js","sourceRoot":"","sources":["../../src/controller/PageController.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response, Router } from \"express\";\nimport { ObjectId } from \"mongodb\";\nimport {BaseRoute} from \"../baseClasses/route\";\nimport DbClient = require(\"../DbClient\");\n\nexport class PageController extends BaseRoute {\n    public static create(router: Router) {\n        // Get landing page\n        router.get(\"/\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().index(req, res);\n        });\n        // add home page route\n        router.get(\"/home\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().home(req, res);\n        });\n        // Get profile page\n        router.get(\"/profile\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().renderUserPage(req, res, \"profile\");\n        });\n        // Get previous bills page\n        router.get(\"/bills/view\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().viewBillsPage(req, res);\n        });\n        // Get upcoming bills page\n        router.get(\"/bills/pay\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().payBillsPage(req, res);\n        });\n        // Get purchase page\n        router.get(\"/purchase/add\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().addPurchasePage(req, res);\n        });\n        // Get purchase page\n        router.get(\"/purchase/view\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().viewPurchasePage(req, res);\n        });\n        // Get request for login page\n        router.get(\"/login\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().loginPage(req, res);\n        });\n        // Get request for register page\n        router.get(\"/register\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().registerPage(req, res);\n        });\n        // Get request for group create page\n        router.get(\"/group/create\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().renderUserPage(req, res, \"groupCreate\");\n        });\n        // Get request for group create page\n        router.get(\"/group/join\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().renderUserPage(req, res, \"groupJoin\");\n        });\n        router.get(\"/group/view\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().renderUserPage(req, res, \"groupView\");\n        });\n        router.get(\"/group/home\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().groupHomePage(req, res);\n        });\n        router.get(\"/notifications/view\", (req: Request, res: Response, next: NextFunction) => {\n            new PageController().renderUserPage(req, res, \"notifications\");\n        });\n    }\n\n    public loginPage(req: Request, res: Response) {\n\n        // render template\n        this.render(req, res, \"login\");\n    }\n\n    // returns the landing page for the site\n    public index(req: Request, res: Response) {\n        this.render(req, res, \"index\");\n    }\n\n    // Renders the register page for the site\n    public registerPage(req: Request, res: Response) {\n\n        // render template\n        this.render(req, res, \"register\", {regerror: \"\", title: \"Register\"});\n    }\n\n    /**\n     * The home page route.\n     *\n     * @class IndexRoute\n     * @method index\n     * @param req {Request} The express Request object.\n     * @param res {Response} The express Response object.\n     * @next {NextFunction} Execute the next method.\n     */\n    public home(req: Request, res: Response) {\n        // set message\n        DbClient.connect()\n            .then((db) => {\n                return db!.collection(\"users\").findOne({UserName: req.query.user});\n            })\n            .then((results) => {\n                if (results === null) {\n                    res.redirect(\"/login\");\n                } else {\n                    this.render(req, res, \"home\", {userInfo: results});\n                }\n            })\n            .catch(() => {\n                res.redirect(\"/login\");\n            });\n\n    }\n\n    /**\n     * The group home page route.\n     *\n     * @class IndexRoute\n     * @method index\n     * @param req {Request} The express Request object.\n     * @param res {Response} The express Response object.\n     */\n    public groupHomePage(req: Request, res: Response) {\n        DbClient.getGroup(new ObjectId(req.query.group))\n            .then((result) => {\n                this.render(req, res, \"groupHome\", {\n                    err: \"\", groupInfo: result[0],\n                    userInfo: {\n                        UserName: req.query.user,\n                        _id: req.query[\"user-id\"],\n                    },\n                });\n            })\n            .catch(() => {\n                this.render(req, res, \"groupHome\", {\n                    err: \"Could not connect to database\", groupInfo: \"\",\n                    userInfo: {UserName: req.query.user},\n                });\n            });\n    }\n\n    /**\n     * The profile page route.\n     *\n     * @class IndexRoute\n     * @method index\n     * @param req {Request} The express Request object.\n     * @param res {Response} The express Response object.\n     */\n    public profilePage(req: Request, res: Response) {\n        if (req.query.user === undefined) {\n            res.redirect(\"/login\");\n        }\n        DbClient.getUser(req.query.user)\n            .then((results) => {\n                this.render(req, res, \"profile\", {\n                    userInfo: results[0],\n                });\n            })\n            .catch(() => {\n                res.json({status: \"Unable to connect to database\"});\n            });\n    }\n\n    /**\n     * Renders the purchase page for the site\n     *\n     * @class IndexRoute\n     * @method index\n     * @param req {Request} The express Request object.\n     * @param res {Response} The express Response object.\n     */\n    public addPurchasePage(req: Request, res: Response) {\n        DbClient.getUser(req.query.user)\n            .then((result) => {\n                this.render(req, res, \"addPurchase\", {\n                    Message: \"\", userInfo: result[0],\n                });\n            })\n            .catch(() => {\n                this.render(req, res, \"addPurchase\",\n                    {\n                        err: \"Could not connect to database\",\n                        userInfo: {\n                            UserName: \"none\",\n                        },\n                    });\n            });\n    }\n\n    /**\n     * Renders the view purchase page for the site\n     *\n     * @class IndexRoute\n     * @method index\n     * @param req {Request} The express Request object.\n     * @param res {Response} The express Response object.\n     * @next {NextFunction} Execute the next method.\n     */\n    public viewPurchasePage(req: Request, res: Response) {\n        DbClient.getUser(req.query.user)\n            .then((result) => {\n                this.render(req, res, \"viewPurchase\", {\n                    Message: \"\", userInfo: result[0],\n                });\n            })\n            .catch(() => {\n                this.render(req, res, \"viewPurchase\", {\n                        err: \"Could not connect to database\",\n                        userInfo: {\n                            UserName: \"none\",\n                        },\n                    });\n            });\n    }\n\n    /**\n     * Renders the view purchase page for the site\n     *\n     * @class IndexRoute\n     * @method index\n     * @param req {Request} The express Request object.\n     * @param res {Response} The express Response object.\n     * @next {NextFunction} Execute the next method.\n     */\n    public viewBillsPage(req: Request, res: Response) {\n        DbClient.getUser(req.query.user)\n            .then((result) => {\n                this.render(req, res, \"billsView\", {\n                    Message: \"\", userInfo: result[0],\n                });\n            })\n            .catch(() => {\n                this.render(req, res, \"billsView\", {\n                    err: \"Could not connect to database\",\n                    userInfo: {\n                        UserName: \"none\",\n                    },\n                });\n            });\n    }\n\n    /**\n     * Renders the view purchase page for the site\n     *\n     * @class IndexRoute\n     * @method index\n     * @param req {Request} The express Request object.\n     * @param res {Response} The express Response object.\n     * @next {NextFunction} Execute the next method.\n     */\n    public payBillsPage(req: Request, res: Response) {\n        DbClient.getUser(req.query.user)\n            .then((result) => {\n                this.render(req, res, \"billsPay\", {\n                    Message: \"\", userInfo: result[0],\n                });\n            })\n            .catch(() => {\n                this.render(req, res, \"billsPay\", {\n                    err: \"Could not connect to database\",\n                    userInfo: {\n                        UserName: \"none\",\n                    },\n                });\n            });\n    }\n\n    /**\n     * Queries user info and generates given page\n     *\n     * @class IndexRoute\n     * @method index\n     * @param req {Request} The express Request object.\n     * @param res {Response} The express Response object.\n     * @param page\n     * @next {NextFunction} Execute the next method.\n     */\n    public renderUserPage(req: Request, res: Response, page: string) {\n        if (undefined === req.query.user) {\n            res.redirect(\"/login\");\n        }\n        DbClient.getUser(req.query.user)\n            .then((results) => {\n                this.render(req, res, page, {\n                    err: \"\",\n                    userInfo: results[0],\n                });\n            })\n            .catch(() => {\n                this.render(req, res, page, {\n                    err: \"Could not connect to the database\",\n                    userInfo: {\n                        userName: req.query.user,\n                    },\n                });\n            });\n    }\n}\n"]}