{"version":3,"file":"GroupController.js","sourceRoot":"","sources":["../../src/controller/GroupController.ts"],"names":[],"mappings":"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","sourcesContent":["import {NextFunction, Request, Response, Router} from \"express\";\nimport {MongoError, ObjectId} from \"mongodb\";\nimport {Group} from \"../baseClasses/Group\";\nimport {Purchase} from \"../baseClasses/Purchase\";\nimport DbClient = require(\"../DbClient\");\n\nexport class GroupController extends Group {\n\n    public static create(router: Router) {\n        router.post(\"/group/add\", (req: Request, res: Response, next: NextFunction) => {\n            new GroupController().make(req, res);\n        });\n        router.post(\"/group/member/add\", (req: Request, res: Response, next: NextFunction) => {\n            new GroupController().addMember(req, res);\n        });\n        router.post(\"/group/member/remove\", (req: Request, res: Response, next: NextFunction) => {\n            new GroupController().removeMember(req, res);\n        });\n        router.post(\"/group/bill/add\", (req: Request, res: Response, next: NextFunction) => {\n            new GroupController().addBill(req, res);\n        });\n        router.get(\"/groups\", (req: Request, res: Response, next: NextFunction) => {\n            new GroupController().getAll(req, res);\n        });\n        router.get(\"/groups/query\", (req: Request, res: Response, next: NextFunction) => {\n            new GroupController().partialMatch(req, res);\n        });\n        router.get(\"/group\", (req: Request, res: Response, next: NextFunction) => {\n            new GroupController().getOne(req, res);\n        });\n        router.get(\"/group/bills/purchases\", (req: Request, res: Response, next: NextFunction) => {\n            new GroupController().getPurchases(req, res);\n        });\n        router.get(\"/group/members\", (req: Request, res: Response, next: NextFunction) => {\n            new GroupController().getMembers(req, res);\n        });\n    }\n\n    /*\n    * Summary: Creates a new group\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public make(req: Request, res: Response) {\n        const members: ObjectId[] = [];\n        const bills: ObjectId[] = [];\n        try {\n            let reqMembers;\n            if (typeof req.body[\"group-members\"] === \"string\") {\n                reqMembers = new Array(req.body[\"group-members\"]);\n            } else {\n                reqMembers = req.body[\"group-members\"];\n            }\n            for (const member of reqMembers) {\n                members.push(new ObjectId(member));\n            }\n        } catch {\n            res.json({message: \"Incorrect id format\"});\n        }\n        DbClient.insert(\"groups\",\n            {Bills: bills, Members: members, Name: req.body[\"group-name\"]})\n            .then((result) => {\n                res.json({groupId: result.ops[0]._id, message: \"Successfully added group\"});\n            })\n            .catch(() => {\n                res.json({message: \"Could not connect to database\"});\n            });\n    }\n\n    /*\n    * Summary: Adds a member to an existing group\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public addMember(req: Request, res: Response) {\n        let member: ObjectId = new ObjectId();\n        let group: ObjectId = new ObjectId();\n        try {\n            member = new ObjectId(req.body[\"group-members\"]);\n            group = new ObjectId((req.body[\"group-id\"]));\n        } catch {\n            res.json({massage: \"Could not connect to database\"});\n        }\n\n        DbClient.push(\"groups\", group, {\n            Members: member,\n        })\n            .then(() => {\n                res.json({\n                    message: \"Successfully added member\",\n                });\n            })\n            .catch(() => {\n                res.json({massage: \"Could not connect to database\"});\n            });\n    }\n    /*\n    * Summary: Removes a user from a group\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public removeMember(req: Request, res: Response) {\n        DbClient.pull(\"groups\", new ObjectId(req.body.group), \"Members\", new ObjectId(req.body.user))\n            .then(() => {\n                res.json({message: \"Successfully removed user from group.\"});\n            })\n            .catch(() => {\n                res.json({message: \"Could not remove user from group\"});\n            });\n    }\n    /*\n    * Summary: Adds a user's bill to a group\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public addBill(req: Request, res: Response) {\n        let bill: ObjectId;\n        let group: ObjectId;\n        try {\n            bill = new ObjectId(req.body.bills.insertedId);\n            group = new ObjectId(req.body.group);\n        } catch {\n            res.json({massage: \"Invalid ids\"});\n            return;\n        }\n\n        DbClient.push(\"groups\", group, {\n            Bills: bill,\n        })\n            .then(() => {\n                res.json({\n                    message: \"Successfully joined group\",\n                });\n            })\n            .catch(() => {\n                res.json({massage: \"Could not connect to database\"});\n            });\n    }\n\n    /*\n    * Summary: Gets all groups in the billsplit database\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public getAll(req: Request, res: Response) {\n        DbClient.aggGroups()\n            .then((results) => {\n                res.json(results);\n            })\n            .catch(() => {\n                res.json({message: \"Could not connect to database\"});\n            });\n    }\n\n    /*\n    * Summary: Gets a sinlge group from the database\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public getOne(req: Request, res: Response) {\n        DbClient.getGroup(new ObjectId(req.query.group))\n            .then((result) => {\n                res.json({err: \"\", group: result[0]});\n            })\n            .catch(() => {\n                res.json({err: \"Could not connect to database\", group: \"\"});\n            });\n    }\n\n    /*\n    * Summary: Finds a partial match in the database\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public partialMatch(req: Request, res: Response) {\n        if (req.query.q === undefined) {\n            return [];\n        }\n        DbClient.connect()\n            .then((db) => {\n                return db.collection(\"groups\").aggregate([{$addFields: {stringId: {$toString: \"$_id\"}},\n                    }, {$match: { $or: [{Name: {$options: \"i\", $regex: req.query.q}},\n                            {stringId: {$options: \"i\", $regex: req.query.q}}]}},\n                ]).toArray();\n            })\n            .then((results) => {\n                res.json(results);\n            })\n            .catch(() => {\n                res.json({message: \"Could not connect to database\"});\n            });\n    }\n\n    /**\n     * Summary: Queries for all of the purchases of a group and adds some of the field of the group into the purchases\n     * @param req\n     * @param res\n     */\n    public getPurchases(req: Request, res: Response) {\n        DbClient.getBills({Group: new ObjectId(req.query.group)})\n            .then((results) => {\n                let purchases: any = [];\n                for (const result of results) {\n                    result.Purchases.item = result.itemOs[0];\n                    result.Purchases.Payee = result.PayeeOs[0];\n                    purchases = purchases.concat(result.Purchases);\n                }\n                const setPurch = new Set(purchases);\n                purchases = Array.from(setPurch);\n                res.json(purchases);\n            })\n            .catch((err: MongoError) => {\n                res.json({error: err});\n            });\n    }\n\n    /**\n     * Summary: Gets the members of a group\n     * @param req\n     * @param res\n     */\n    public getMembers(req: Request, res: Response) {\n        DbClient.getGroup(new ObjectId(req.query.group))\n            .then((result) => {\n                res.json({members: result[0].Members});\n            })\n            .catch((error) => {\n                res.json({err: error});\n            });\n    }\n}\n"]}