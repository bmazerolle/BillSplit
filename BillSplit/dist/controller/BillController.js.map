{"version":3,"file":"BillController.js","sourceRoot":"","sources":["../../src/controller/BillController.ts"],"names":[],"mappings":"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","sourcesContent":["import {NextFunction, Request, Response, Router} from \"express\";\nimport {ObjectId} from \"mongodb\";\nimport {Bill} from \"../baseClasses/Bill\";\nimport {Frequency} from \"../baseClasses/Frequency\";\nimport {Purchase} from \"../baseClasses/Purchase\";\nimport {User} from \"../baseClasses/User\";\nimport DbClient = require(\"../DbClient\");\nimport {UserController} from \"./UserController\";\n\nexport class BillController extends Bill {\n\n    public static create(router: Router) {\n        // Form with bill-id, item-id\n        router.post(\"/purchases/add\", (req: Request, res: Response, next: NextFunction) => {\n            new BillController(req.query.user).addPurchase(res, req);\n        });\n        // Form with bill-id, item-id\n        router.post(\"/purchases/remove\", (req: Request, res: Response, next: NextFunction) => {\n            new BillController(req.body.user).removePurchase(res, req);\n        });\n        // Form with bill-id, item-id\n        router.post(\"/bill/create\", (req: Request, res: Response, next: NextFunction) => {\n            new BillController(req.body.user).createBill(res, req);\n        });\n        router.post(\"/bill/purchase/remove\", (req: Request, res: Response, next: NextFunction) => {\n            new BillController(req.body.user).removePurchaseByGroup(req, res);\n        });\n        router.post(\"/bill/payer/add\", (req: Request, res: Response, next: NextFunction) => {\n            new BillController(req.body.user).addPayer(req, res);\n        });\n        // Form with bill-id, item-id (ex. ObjectId(\"xxxxxxxxxxxxxxxxxxxxxxxx\"))\n        router.post(\"/bill/pay\", (req: Request, res: Response, next: NextFunction) => {\n            new BillController(req.body.user).payBill(res, req);\n        });\n        // Form with bill-id, item-id (ex. ObjectId(\"xxxxxxxxxxxxxxxxxxxxxxxx\"))\n        router.get(\"/bill/paid\", (req: Request, res: Response, next: NextFunction) => {\n            new BillController(req.body.user).checkBillPaid(res, req);\n        });\n    }\n    public billID!: ObjectId;\n\n    /*\n    * Summary: Writes to a user's bill within the group they have added their purchase to\n    * Parameters: HTTP response, HTTP request, individual Bill ID, the purchase to add\n    * Returns: none\n     */\n    public writeToBill(res: Response, req: Request, billId: ObjectId, purchase: Purchase) {\n        DbClient.push(\"bills\", billId, {\n            Purchases: purchase,\n        })\n            .then((r) => {\n                res.json({status: \"Successfully wrote to bill\"});\n            })\n            .catch(() => {\n                res.json({status: \"Unable to write to this user's bill on this group\"});\n            });\n    }\n    /*\n    * Summary: Determines the correct bill within a group to add a purchase to\n    * Parameters: HTTP response, HTTP request,\n    *             the array of all bills in the group the purchase was added to, the purchase to add\n    * Returns: none\n     */\n    public chooseBill(res: Response, req: Request, groupBills: any, purchase: Purchase) {\n        for (const groupBill of groupBills) {\n            DbClient.getBill(new ObjectId(groupBill))\n                .then((results) => {\n                    const userId = results[0].Payee.toString();\n                    if (userId === req.body.user) {\n                        this.writeToBill(res, req, results[0]._id, purchase);\n                    }\n                })\n                .catch(() => {\n                    res.json({status: \"Unable to find a bill for this user in this group\"});\n                });\n        }\n    }\n\n    /**\n     * Summary: Adds a purhase to a user field\n     * @param res\n     * @param req\n     * @param purchase\n     */\n    public addPurchaseToUser(res: Response, req: Request, purchase: Purchase) {\n        DbClient.push(\"users\", new ObjectId(req.body.user), {\n                Purchases: purchase,\n            })\n            .then(() => {\n                res.json({status: \"Successfully wrote to bill\"});\n            })\n            .catch(() => {\n                res.json({status: \"Unable to write to this user's bill on this group\"});\n            });\n    }\n\n    /**\n     * Summary: Creates a purchase\n     * @param res\n     * @param req\n     * @param groupName\n     * @param groupBills\n     * @param groupMembers\n     */\n    public createPurchase(res: Response, req: Request, groupName: string, groupBills: any, groupMembers: ObjectId[]) {\n        const itemId = new ObjectId(req.body[\"bill-item-id\"]);\n        const today = new Date();\n        DbClient.getItem(itemId)\n            .then((results: any) => {\n                const purchase = new Purchase(today,\n                    itemId,\n                    +req.body[\"bill-purchase-frequency\"],\n                    results[0].Name,\n                    results[0].Price,\n                    req.body[\"bill-purchase-quantity\"],\n                    groupName);\n                this.addNotifications(res, req, purchase, groupMembers, itemId);\n                this.addPurchaseToUser(res, req, purchase);\n                this.chooseBill(res, req, groupBills, purchase);\n            })\n            .catch(() => {\n                res.json({status: \"Unable to find group\"});\n            });\n    }\n    // Needs the groupID, group bills, group members\n    public addNotifications(res: Response, req: Request, purchase: Purchase,\n                            groupMembers: ObjectId[], itemId: ObjectId) {\n        const groupID = req.body.groupName;\n        // send notification to all members of a group that are not the purchaser\n        for (const member of groupMembers) {\n            if (member.toString() !== req.body.user) {\n                DbClient.insert(\"notification\", {\n                        Accepted: false,\n                        From: new ObjectId(req.body.user),\n                        Group: new ObjectId(groupID),\n                        Pending: true,\n                        Purchase: purchase,\n                        Seen: false,\n                        To: new ObjectId(member),\n                    })\n                    .catch((err) => {\n                        res.json({message: err});\n                    });\n            }\n        }\n    }\n    /*\n    * Summary: Creates a new purchase object, determines the group to add the purchase to,\n    *          and passes the purchase to the chooseBill() function\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n    */\n    public addPurchase(res: Response, req: Request) {\n        const groupID = req.body.groupName;\n        // Get group -> pull bills from group\n        DbClient.getGroup(new ObjectId(groupID))\n            .then((results) => {\n                this.createPurchase(res, req, results[0].Name, results[0].Bills, results[0].Members);\n            })\n            .catch(() => {\n                res.json({status: \"Unable to find group\"});\n            });\n    }\n    /*\n    * Summary: Deletes a purchase from a bill\n    * Parameters: HTTP response, HTTP request, the array of all bills in the group\n    *             the purchase was added to, the purchase to add\n    * Returns: none\n     */\n    public removePurchase(res: Response, req: Request) {\n        DbClient.pull(\"bills\", new ObjectId(req.body.groupName), \"Purchases\", this.purchases[0].item)\n            .then(() => {\n                res.redirect(\"/purchases/view?user=\" + req.query.user);\n            })\n            .catch(() => {\n                res.json({status: \"Unable to remove purchase from bill\"});\n            });\n    }\n\n    /*\n    * Summary: Creates a bill for a member of a group upon group creation or group joining\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public createBill(res: Response, req: Request) {\n        const payee = req.body.billPayee;\n        let payers = req.body.billPayer;\n        const groupName = req.body.billGroup;\n\n        if (payers === undefined) {\n            payers = [];\n        }\n\n        if (typeof payers === \"string\") {\n            payers = new Array(payers);\n        }\n        const payerOb: ObjectId[] = [];\n        if (payers.length !== 0) {\n            for (const payer of payers) {\n                payerOb.push(new ObjectId(payer));\n            }\n        }\n\n        DbClient.insert(\"bills\", {\n            Group: new ObjectId(groupName),\n            Paid: {},\n            Payee: new ObjectId(payee),\n            Payer: payerOb,\n            Purchases: [],\n        })\n            .then((results) => {\n                res.json(results);\n            }).catch(() => {\n            res.json({status: \"Unable to create bill\"});\n        });\n    }\n\n    /**\n     * Summary: Removes a purchase by matching the fields Group and Payer\n     * @param req\n     * @param res\n     */\n    public removePurchaseByGroup(req: Request, res: Response) {\n        DbClient.pullPurchaseByGroupUser({ Group: new ObjectId(req.body.group),\n                Payer: { $elemMatch: { $eq:  new ObjectId(req.body.user) } } },\n            { date: new Date(req.body.date),\n                item: new ObjectId(req.body.item) },\n            )\n            .then((result) => {\n                if (result.result.nModified === 1) {\n                    res.json({successful: true});\n                } else {\n                    res.json({\n                        message: \"Could not find purchase in bill\",\n                        successful: true,\n                    });\n                }\n            })\n            .catch(() => {\n                res.json({\n                    message: \"Could not connect to database\",\n                    successful: true,\n                });\n            });\n    }\n\n    /**\n     * Adds a payer to a bill\n     * @param req\n     * @param res\n     */\n    public addPayer(req: Request, res: Response) {\n            DbClient.addPayer({Payee: new ObjectId(req.body.member), Group: new ObjectId(req.body.group)},\n                new ObjectId(req.body.payer))\n                .then((result) => {\n                    if (result.result.nModified === 1) {\n                        res.json({successful: true});\n                    } else {\n                        res.json({successful: false, message: \"could not find Payer\"});\n                    }\n                })\n                .catch((error) => {\n                    res.json({successful: false, message: \"could not connect to database\"});\n                });\n        }\n\n    public addUserToPaidList(res: Response, req: Request, bill: any, paidList: { [id: string]: string[][]}) {\n        const curYear = req.body.year;\n        const curMonthNum = +req.body.month;\n        const curMonth = \"\" + curMonthNum;\n        let monthList: string[] = [];\n        let yearList: string[][] = [ [], [], [], [], [], [], [], [], [], [], [], [] ];\n        const newPaidList: { [id: string]: string[][]} = {};\n        if (paidList[curYear]) {\n            yearList = paidList[curYear];\n        }\n        if (yearList[curMonthNum]) {\n            monthList = yearList[curMonthNum];\n        }\n        if (monthList.indexOf(req.body.user) === -1) {\n            monthList.push(req.body.user);\n        }\n        yearList[curMonthNum] = monthList;\n        newPaidList[curYear] = yearList;\n        DbClient.updateSingle(\"bills\", {_id: bill}, {Paid: newPaidList})\n            .catch((err: any) => {\n                return false;\n            });\n    }\n\n    public setPaid(res: Response, req: Request, groupBills: any) {\n        // get the current paidList, add the new paid, replace the list\n        for (const groupBill of groupBills) {\n            DbClient.getBill(groupBill)\n                .then((results) => {\n                    // want to pass in the bill paid obj too\n                    this.addUserToPaidList(res, req, groupBill, results[0].Paid);\n                })\n                .catch((err: any) => {\n                    return false;\n                });\n        }\n    }\n\n    /*\n    * Summary: Creates a bill for a member of a group upon group creation or group joining\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public payBill(res: Response, req: Request) {\n        const groupID = req.body.group;\n        // Get group -> pull bills from group\n        DbClient.getGroup(new ObjectId(groupID))\n            .then((results) => {\n                 this.setPaid(res, req, results[0].Bills);\n            })\n                .then(() => {\n                    res.json(\"Great Success\");\n                })\n                .catch(() => {\n                    res.json({status: \"Unable to find a bill for this user in this group\"});\n                });\n    }\n\n    public checkBillPaid(res: Response, req: Request) {\n        console.log(req.query.allPurchases.Group.Bills[0]);\n        DbClient.getBill(new ObjectId(req.query.allPurchases.Group.Bills[0]))\n            .then((results) => {\n                res.json(results[0].Paid);\n            })\n            .catch(() => {\n                res.json({status: \"Unable to find bill\"});\n            });\n    }\n}\n"]}