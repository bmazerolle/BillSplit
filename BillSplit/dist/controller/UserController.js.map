{"version":3,"file":"UserController.js","sourceRoot":"","sources":["../../src/controller/UserController.ts"],"names":[],"mappings":"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","sourcesContent":["import {ObjectId} from \"bson\";\nimport {NextFunction, Request, Response, Router} from \"express\";\nimport sha256 from \"fast-sha256\";\nimport {MongoError} from \"mongodb\";\nimport {TextEncoder} from \"text-encoding\";\nimport { User } from \"../baseClasses/User\";\nimport DbClient = require(\"../DbClient\");\n\n\nexport class UserController extends User {\n\n    // Creates the routes for the UserController\n\n    public static create(router: Router) {\n        // post with name-reg, username-reg, email-reg, pass-reg, pass-conf-reg\n        router.post(\"/register/create\", (req: Request, res: Response, next: NextFunction) => {\n            new UserController().register(req, res);\n        });\n        // post with name-reg, username-reg, email-reg, pass-reg, pass-conf-reg\n        router.post(\"/login/auth\", (req: Request, res: Response, next: NextFunction) => {\n            new UserController().authenticate(req, res);\n        });\n        router.get(\"/users\", (req: Request, res: Response, next: NextFunction) => {\n            new UserController().getAll(req, res);\n        });\n        router.post(\"/user/group/addGroup\", (req: Request, res: Response, next: NextFunction) => {\n            new UserController().addGroup(req, res);\n        });\n        router.post(\"/user/group/remove\", (req: Request, res: Response, next: NextFunction) => {\n            new UserController().removeGroup(req, res);\n        });\n        router.get(\"/user/notification/count\", (req: Request, res: Response, next: NextFunction) => {\n            new UserController().countNotifications(req, res);\n        });\n        router.get(\"/user/notifications\", (req: Request, res: Response, next: NextFunction) => {\n            new UserController().getNotifications(req, res);\n        });\n        router.post(\"/user/notifications/clear\", (req: Request, res: Response, next: NextFunction) => {\n            new UserController().clearNotifications(req, res);\n        });\n        router.get(\"/user/bills/purchases\", (req: Request, res: Response, next: NextFunction) => {\n            new UserController().getPurchases(req, res);\n        });\n        router.post(\"/user/notifications/accept\", (req: Request, res: Response, next: NextFunction) => {\n            new UserController().acceptNotifications(req, res);\n        });\n        router.delete(\"/user/notifications/decline\", (req: Request, res: Response, next: NextFunction) => {\n            new UserController().removeNotification(req, res);\n            new UserController().declineNotification(req, res);\n        });\n    }\n\n    /*\n    * Summary: Attached to the /login/auth route, it checks the user's password against whats in the database\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public authenticate(req: Request, res: Response) {\n        const name = req.body[\"email-log\"];\n        const pass = req.body[\"pass-log\"];\n        DbClient.connect()\n            .then((db: any) => {\n                return db!.collection(\"users\").findOne({\n                    $or: [\n                            {UserName: name},\n                            {Email: name},\n                        ],\n                });\n            })\n            .then((result: any) => {\n                if (result.Password === this.hash(pass)) {\n                    const username = encodeURIComponent(result.UserName);\n                    res.redirect(\"/home?user=\" + username);\n                } else {\n                    this.render(req, res, \"login\", {\n                        regMessage: \"Incorrect UserName or Password\",\n                    });\n                }\n            })\n            .catch((err: any) => {\n                this.render(req, res, \"login\", {\n                    regMessage: \"Error connecting to Database\",\n                });\n            });\n    }\n\n    /*\n    * Summary: Verifies the registration fields are filled out correctly by the user\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public verify(req: Request, res: Response) {\n        const emailRegexp = new RegExp(/\\S+@\\S+.\\S+/);\n\n        if (req.body[\"name-reg\"] === \"\" || req.body[\"username-reg\"] === \"\"\n            || req.body[\"pass-reg\"] === \"\" || req.body[\"email-reg\"] === \"\") {\n            this.render(req, res, \"register\", {\n                page: \"register\",\n                regMessage: \"Not all fields filled out correctly\",\n            });\n            return false;\n        }\n        if (!emailRegexp.test(req.body[\"email-reg\"])) {\n            this.render(req, res, \"register\", {\n                page: \"register\",\n                regMessage: \"Invalid email provided\",\n            });\n            return false;\n        }\n        if (req.body[\"pass-reg\"] !== req.body[\"pass-conf-reg\"]) {\n            this.render(req, res, \"register\", {\n                page: \"register\",\n                regMessage: \"Passwords do not match\",\n            });\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Summary: int array to a hex string\n     * @param intArray\n     */\n    public arrayToString(array: any): string {\n        let str: string = \"\";\n        for (const element of array) {\n            str += element.toString(16);\n        }\n        return str;\n    }\n\n    /**\n     * Summary: wrapper for abstracting password hashing\n     * @param password\n     */\n    public hash(password: string) {\n        return this.arrayToString(sha256(new TextEncoder(\"utf-8\").encode(password)));\n    }\n\n    /*\n    * Summary: Registers a new user for the site\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public register(req: Request, res: Response) {\n        if (!this.verify(req, res)) {\n            return;\n        }\n        DbClient.insert(\"users\", {\n                Bills: [],\n                Email: req.body[\"email-reg\"],\n                FacebookAccount: \"\",\n                Groups: [],\n                Name: req.body[\"name-reg\"],\n                Password: this.hash(req.body[\"pass-reg\"]),\n                Purchases: [],\n                UserName: req.body[\"username-reg\"],\n            })\n            .then((result: any) => {\n                this.render(req, res, \"login\", {\n                    page: \"login\",\n                    regMessage: \"Successfully signed up\",\n                });\n            })\n            .catch((err: any) => {\n                this.render(req, res, \"register\", {\n                    page: \"login\",\n                    regMessage: \"Database error. Database not running or account already exists\",\n                });\n            });\n    }\n\n    /*\n    * Summary: Gets an array of all users in the BillSplit app\n    * Parameters: HTTP response, HTTP request\n    * Returns: An array of all Billsplit users\n     */\n    public getAll(req: Request, res: Response) {\n        DbClient.getAll(\"users\")\n            .then((result: any) => {\n                res.json(result);\n            })\n            .catch((err: any) => {\n                res.json({err: \"Could not connect to db\"});\n            });\n    }\n\n    /*\n    * Summary: Adds a group to a user when the user joins a new group\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public addGroup(req: Request, res: Response) {\n        const groupId = new ObjectId(req.body.group);\n        let members;\n        if (typeof req.body.users === \"string\") {\n            members = new Array(req.body.users);\n        } else {\n            members = req.body.users;\n        }\n        for (const member of members) {\n            const memberId = new ObjectId(member);\n            DbClient.push(\"users\", memberId, {Groups: groupId})\n                .catch((err: any) => {\n                    res.json({err: \"Could not connect to db\"});\n                });\n        }\n        res.json({message: \"Successfully added group\"});\n    }\n\n    /*\n    * Summary: Removes a group form the user's Group[] array when they leave a group\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public removeGroup(req: Request, res: Response) {\n        DbClient.pull(\"users\", new ObjectId(req.body.user), \"Groups\", new ObjectId(req.body.group))\n            .then((result: any) => {\n                res.json({message: \"Successfully removed group from user\"});\n            })\n            .catch((err: any) => {\n                res.json({message: \"Could not remove user from group\"});\n            });\n    }\n\n    /**\n     * Summary: Adds a notification document to the collection\n     * @param doc\n     * @param res\n     */\n    public addNotification(doc: any, res: Response) {\n        DbClient.insert(\"notification\", doc)\n            .catch((err: MongoError) => {\n                res.json({message: err});\n            });\n    }\n\n    /**\n     * Summary: Sets the Accepted field of a notification to be true\n     * @param req\n     * @param res\n     */\n    public acceptNotifications(req: Request, res: Response) {\n        DbClient.updateOne(\"notification\", new ObjectId(req.body.notification), {$set: {Accepted: true}})\n            .then((result: any) => {\n                if (result.result.nModified === 1) {\n                    res.json({successful: true});\n                } else {\n                    res.json({\n                        message: \"Did not update\",\n                        successful: false,\n                    });\n                }\n            })\n            .catch((err: MongoError) => {\n                res.json({\n                    message: \"Could not connect to database\",\n                    successful: false,\n                });\n            });\n    }\n\n    /**\n     * Summary: Removes a notification from a collection\n     * @param req\n     * @param res\n     */\n    public removeNotification(req: Request, res: Response) {\n        DbClient.remove(\"notification\", new ObjectId(req.body.notification))\n            .then((result) => {\n                if (1 === result.deletedCount) {\n                    res.json({\n                        successful: true,\n                    });\n                } else {\n                    res.json({\n                        message: \"did not successfully remove item\",\n                        successful: false,\n                    });\n                }\n            })\n            .catch(() => {\n                res.json({\n                    message: \"did not successfully remove item\",\n                    successful: false,\n                });\n            });\n    }\n\n    /**\n     * Summary: Puts a decline notification in the collection\n     * @param req\n     * @param res\n     */\n    public declineNotification(req: Request, res: Response) {\n        DbClient.insert(\"notification\", {\n                Date: new Date(),\n                From: new ObjectId(req.body.from),\n                Item: new ObjectId(req.body.item),\n                Pending: false,\n                Seen: false,\n                To: new ObjectId(req.body.to)})\n            .catch((err) => {\n                res.json({\n                    error: \"Could not send notification\",\n                });\n            });\n    }\n\n    /*\n    * Summary: Counts the amount of notifications a given user has not seen yet\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public countNotifications(req: Request, res: Response) {\n        DbClient.count(\"notification\", {To: new ObjectId(req.query.user), Seen: false})\n            .then((result) => {\n                res.json({\n                    count: result,\n                    err: \"None\",\n                });\n            })\n            .catch((err: MongoError) => {\n                res.json({\n                    count: 0,\n                    error: err,\n                });\n            });\n    }\n\n    /*\n    * Summary: Gets the notification of a given user and responses the the request given\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public getNotifications(req: Request, res: Response) {\n        DbClient.getNotifications( {\n                To: new ObjectId(req.query.user),\n            })\n            .then((result: any) => {\n                res.json({\n                    error: \"None\",\n                    notifications: result,\n                });\n            })\n            .catch((err: any) => {\n                res.json({\n                    error: err,\n                    notifications: \"None\",\n                });\n            });\n    }\n\n    /*\n    * Summary: Marks the notifications of a given user as seen\n    * Parameters: HTTP response, HTTP request\n    * Returns: none\n     */\n    public clearNotifications(req: Request, res: Response) {\n        DbClient.updateMultiple(\"notification\", {To: new ObjectId(req.body.user)}, {Seen: true})\n            .then((response) => {\n                res.json({successful: true});\n            })\n            .catch((err: MongoError) => {\n                res.json({error: err});\n            });\n    }\n\n    /**\n     * Summary: Takes the query results and formats them to be processed easier later on.\n     * @param purchasesQuery\n     * @param req\n     */\n    public formatPurchases(purchasesQuery: any, req: Request): any {\n        const purchases: any = {\n            payee: [],\n            payer: [],\n        };\n\n        for (const result of purchasesQuery) {\n            result.Purchases.item = result.itemOs[0];\n            result.Purchases.Group = result.groupOs[0];\n            result.Purchases.Payee = result.PayeeOs[0];\n            if (result.Payee.toString() === req.query.user) {\n                purchases.payee.push(result.Purchases);\n            } else {\n                if (purchases.payer.filter((purch: any) => {\n                    return (purch.Payee._id.toString() === result.Payee.toString() &&\n                        purch.Group.toString() === result.Group.toString());\n                }).length === 0) {\n                    purchases.payer.push(result.Purchases);\n                }\n            }\n        }\n        return purchases;\n    }\n\n    /**\n     * Summary: Queries for a users purchases\n     * @param req\n     * @param res\n     */\n    public getPurchases(req: Request, res: Response) {\n        DbClient.getBills({ $or: [\n                { Payee: new ObjectId(req.query.user) },\n                { Payer: { $elemMatch: {$eq : new ObjectId(req.query.user)} } },\n            ]})\n            .then((results: any) => {\n                const purchases = this.formatPurchases(results, req);\n                res.json(purchases);\n            })\n            .catch((error: any) => {\n                res.json(error);\n            });\n    }\n}\n"]}